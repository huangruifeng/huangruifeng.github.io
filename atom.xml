<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录每一天</title>
  
  <subtitle>huangruifeng blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-19T18:02:32.434Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>huangruifeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++新特性之初始化列表</title>
    <link href="http://yoursite.com/2020/06/19/c++%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/06/19/c++%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/</id>
    <published>2020-06-19T08:23:12.000Z</published>
    <updated>2020-06-19T18:02:32.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="initializer-Lists"><a href="#initializer-Lists" class="headerlink" title="initializer Lists"></a>initializer Lists</h2><h3 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h3><p>用来设置初值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i; <span class="comment">//undefined </span></span><br><span class="line"><span class="keyword">int</span> j&#123;&#125; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">int</span> *p;<span class="comment">//uhdefined</span></span><br><span class="line"><span class="keyword">int</span> *q&#123;&#125; <span class="comment">//nullptr</span></span><br></pre></td></tr></table></figure><p>需要注意的 narrowing initializations<br>当有数据丢失的风险时会报错 或者 warining 下面是在gcc7.5.0上测试的结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x1</span><span class="params">(<span class="number">5.3</span>)</span></span>;<span class="comment">//OK </span></span><br><span class="line"><span class="keyword">int</span> x2 = <span class="number">5.3</span>;<span class="comment">//OK</span></span><br><span class="line"><span class="keyword">int</span> x3&#123;<span class="number">5.3</span>&#125;; <span class="comment">//error: narrowing conversion of ‘5.2999999999999998e+0’ from ‘double’ to ‘int’ inside &#123; &#125; [-Wnarrowing]</span></span><br><span class="line"><span class="keyword">int</span> x4 = &#123;<span class="number">5.3</span>&#125;; <span class="comment">// error: narrowing conversion of ‘5.2999999999999998e+0’ from ‘double’ to ‘int’ inside &#123; &#125; [-Wnarrowing]</span></span><br><span class="line"><span class="keyword">char</span> c1 &#123;<span class="number">7</span>&#125;; <span class="comment">//OK</span></span><br><span class="line"><span class="keyword">char</span> c2&#123;<span class="number">257</span>&#125;; <span class="comment">//error: narrowing conversion of ‘257’ from ‘int’ to ‘char’ inside &#123; &#125; [-Wnarrowing]</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//OK</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">1</span>,<span class="number">2.3</span>,<span class="number">4</span>,<span class="number">4.6</span>&#125;;/ error: narrowing conversion of ‘<span class="number">2.2999999999999998e+0</span>’ from ‘<span class="keyword">double</span>’ to ‘<span class="keyword">int</span>’ inside &#123; &#125; [-Wnarrowing]</span><br></pre></td></tr></table></figure><p>c++11 提供了initializer_list&lt;&gt; 类来支撑上面的用法，我们也可以自己使用这个类，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tips</span></span><br><span class="line"><span class="comment">//标准库中的容器都有initializer_list为参赛的构造函数，故下面的</span></span><br><span class="line"><span class="comment">//initializer_list可以改为 deque,vector,list </span></span><br><span class="line"><span class="keyword">auto</span> print = [](<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; vals) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = vals.begin();p!=vals.end();++p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*p&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">print(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">13</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="参数匹配规则："><a href="#参数匹配规则：" class="headerlink" title="参数匹配规则："></a>参数匹配规则：</h3><ol><li>如果有参数为initializer_list的函数，直接会调用对应参数为initializer_list的函数</li><li>若干没有参数为initializer_list的函数，则进行拆分initializer_list去匹配有相同参数个数，相同参数类型的函数。</li></ol><p>example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// fun1</span></span><br><span class="line">    P(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; <span class="string">"P(int,int)"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fun2</span></span><br><span class="line">    P(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; initlist)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"P(initializer)"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// fun1 与 fun2 同时存在的调用结果</span></span><br><span class="line"><span class="function">P <span class="title">p</span><span class="params">(<span class="number">77</span>, <span class="number">5</span>)</span></span>; <span class="comment">// P(int,int)</span></span><br><span class="line">P q&#123;<span class="number">77</span>, <span class="number">5</span>&#125;; <span class="comment">//P(initializer)</span></span><br><span class="line">P r&#123;<span class="number">77</span>, <span class="number">55</span>, <span class="number">26</span>&#125;; <span class="comment">//P(initializer)</span></span><br><span class="line">P s = &#123;<span class="number">77</span>, <span class="number">5</span>&#125;;   <span class="comment">//P(initializer)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉构造函数fun2 只保留fun1</span></span><br><span class="line"><span class="function">P <span class="title">p</span><span class="params">(<span class="number">77</span>, <span class="number">5</span>)</span></span>; <span class="comment">// P(int,int)</span></span><br><span class="line">P q&#123;<span class="number">77</span>, <span class="number">5</span>&#125;; <span class="comment">//P(int,int)</span></span><br><span class="line">P r&#123;<span class="number">77</span>, <span class="number">55</span>, <span class="number">26</span>&#125;; <span class="comment">//error: no matching function for call to ‘P::P(&lt;brace-enclosed initializer list&gt;)’</span></span><br><span class="line">P s = &#123;<span class="number">77</span>, <span class="number">5</span>&#125;;   <span class="comment">//P(int,int)</span></span><br></pre></td></tr></table></figure><h3 id="initializer-list-的实现原理"><a href="#initializer-list-的实现原理" class="headerlink" title="initializer_list 的实现原理"></a>initializer_list 的实现原理</h3><p>以下代码摘自 gcc 7.5.0</p><p>initializer_list的构造函数为 private故我们不能主动调用它，看注释可知这个构造函数是编译器可调用的。<br>故：当我们 使用大括号时 如{12,3,4,5}，编译器会先生成一个数组，然后用数字的首地址，和size来构造initializer_list。</p><blockquote><p>Tips</p><ol><li>const_iterator 类型为const _E* 也就时元素的指针，它指向的是array的地址，故array 到initializer_list应该是浅拷贝</li><li>标准库中用了大量的initializer_list，如 容器的个构造，插入，还有算法 如：max({string(“abc”,string(“c”),string(“defg”)}),min({1,2,5,4,6,7,8}) </li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码摘自 gcc 7.5.0 #include&lt;initializer_list&gt;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">initializer_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _E value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> _E&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> _E&amp; const_reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> _E* iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> _E* const_iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    iterator_M_array;</span><br><span class="line">    size_type_M_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The compiler can call a private constructor.</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">initializer_list</span><span class="params">(const_iterator __a, size_type __l)</span></span></span><br><span class="line">    : _M_array(__a), _M_len(__l) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">initializer_list</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line">    : _M_array(0), _M_len(0) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of elements.</span></span><br><span class="line">    <span class="keyword">constexpr</span> size_type</span><br><span class="line">    size() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> _M_len; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First element.</span></span><br><span class="line">    <span class="keyword">constexpr</span> const_iterator</span><br><span class="line">    begin() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> _M_array; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// One past the last element.</span></span><br><span class="line">    <span class="keyword">constexpr</span> const_iterator</span><br><span class="line">    end() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> begin() + size(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;initializer-Lists&quot;&gt;&lt;a href=&quot;#initializer-Lists&quot; class=&quot;headerlink&quot; title=&quot;initializer Lists&quot;&gt;&lt;/a&gt;initializer Lists&lt;/h2&gt;&lt;h3 id=&quot;用途：&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++新特性之语法优化</title>
    <link href="http://yoursite.com/2020/06/17/c++%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E8%AF%AD%E6%B3%95%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/06/17/c++%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E8%AF%AD%E6%B3%95%E4%BC%98%E5%8C%96/</id>
    <published>2020-06-17T08:27:12.000Z</published>
    <updated>2020-06-19T16:40:48.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板表达式中的空格"><a href="#模板表达式中的空格" class="headerlink" title="模板表达式中的空格"></a>模板表达式中的空格</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="comment">//old </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="comment">//Ok since C++11</span></span><br></pre></td></tr></table></figure><h2 id="nullptr-and-std-nullptr-t"><a href="#nullptr-and-std-nullptr-t" class="headerlink" title="nullptr and std::nullptr_t"></a>nullptr and std::nullptr_t</h2><p>为了区分指针和整形增加了nullptr<br>使用nullptr 去代替0或者NULL</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;cstddef&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(<span class="literal">nullptr</span>)</span> <span class="keyword">nullptr_t</span></span></span><br></pre></td></tr></table></figure><p>类型std::nullptr_t 可以定义类型<br>具体使用看下面测试代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"int"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span> *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"void*"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">void</span> *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"void*"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">nullptr_t</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"nullptr_t"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f(<span class="number">0</span>); <span class="comment">//int</span></span><br><span class="line">    f(<span class="number">12345</span>);<span class="comment">//int</span></span><br><span class="line">    f(<span class="literal">nullptr</span>);<span class="comment">//void*</span></span><br><span class="line">    <span class="keyword">nullptr_t</span> t;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="literal">nullptr</span>) <span class="comment">//true</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"t == nullptr"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f2(t); <span class="comment">//nullptr_t</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>类型推倒 (一般使用在类型复杂，太长（迭代器），无法写的类型如lambda)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">42</span>; <span class="comment">//i 为int</span></span><br><span class="line"><span class="keyword">auto</span> l = [](<span class="keyword">int</span> x)-&gt;<span class="keyword">bool</span>&#123; <span class="comment">//l为 匿名函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="keyword">auto</span> v = v.begin();</span><br></pre></td></tr></table></figure><p>作为函数返回值 decltype可以提取表达式的类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i =<span class="number">42</span>;</span><br><span class="line"><span class="keyword">auto</span> l = [](<span class="keyword">int</span> x) -&gt; <span class="keyword">decltype</span>(x) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> b = l(<span class="number">33</span>);</span><br></pre></td></tr></table></figure><h2 id="Uniform-Initialization-统一初始化"><a href="#Uniform-Initialization-统一初始化" class="headerlink" title="Uniform Initialization(统一初始化)"></a>Uniform Initialization(统一初始化)</h2><p>含义：任何初始化动作都可以用共同的一种语法来初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> values[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; cities &#123;<span class="string">"beijing"</span>,<span class="string">"shanghaii"</span>,<span class="string">"xian"</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">complex</span>&lt;<span class="keyword">double</span>&gt; c&#123;<span class="number">4.0</span>,<span class="number">3.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>编译器看到{t1,t2…tn}时便做出一个initializer_list,它关联一个array&lt;T，n&gt;。调用函数时（如ctor）这个array内的 元素可以被编译器分解并传给函数。但是如果函数参数是initializer_list<T>时（容器都会有一个参数为它的构造函数）如上面的vector初始化，调用者无法知道参数的个数此时会把它们（array&lt;T,n&gt;）自动转换为一个initializer传进去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; cities &#123;<span class="string">"beijing"</span>,<span class="string">"shanghaii"</span>,<span class="string">"xian"</span>&#125;;</span><br></pre></td></tr></table></figure><p>上面的代码会形成一个 initializer_list<string>,背后有一个 array&lt;string,6&gt;,调用vector<string> ctors时编译器找到了一个接受initializer_list<striing>参数的构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">complex</span>&lt;<span class="keyword">double</span>&gt; c&#123;<span class="number">4.0</span>,<span class="number">3.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>上面的代码生成一个initializer_list<double>，背后有一个array&lt;double,2&gt;。调用complex<double>的构造函数时，这个array内的两个元素被分解传给构造函数。complex<double>没有可以接受参数为 initializer_list<double>的构造函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板表达式中的空格&quot;&gt;&lt;a href=&quot;#模板表达式中的空格&quot; class=&quot;headerlink&quot; title=&quot;模板表达式中的空格&quot;&gt;&lt;/a&gt;模板表达式中的空格&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>可变模板参数</title>
    <link href="http://yoursite.com/2020/06/17/c++%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2020/06/17/c++%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0/</id>
    <published>2020-06-17T07:36:35.000Z</published>
    <updated>2020-06-19T16:23:50.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>侯捷老师的课程笔记</p></blockquote><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>类似下面的写法，在typename后面加了 … 表示一组东西，或者一包东西。<br>这一组东西，可以是任意类型。与c语言的的可变参数有点像。<br>使用variadic Templates 可以很方便的完成 recursive function call</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Types&gt;<span class="comment">//任意类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> T&amp; firstArg,<span class="keyword">const</span> Types&amp;...args)</span><span class="comment">//任意个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//sizeof...(args)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;firstArg&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//打印第一个参数</span></span><br><span class="line">    print(args...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结束递归使用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Types&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> T&amp; firstArg,<span class="keyword">const</span> Types&amp;...args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;firstArg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">/*递归调用 一一分解参数，变为1+n的形式 直到把所有参数分解完，</span></span><br><span class="line"><span class="comment">    然后调用上面的print()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">example</span></span><br><span class="line"><span class="comment">1. print(123, others);</span></span><br><span class="line"><span class="comment">2. print(2.3 ,others);</span></span><br><span class="line"><span class="comment">3. print("abc",others);</span></span><br><span class="line"><span class="comment">4. print(bitset&lt;16&gt;(377),others(此时没有参数))</span></span><br><span class="line"><span class="comment">5. print();调用无形参的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>,<span class="number">2.3</span>,<span class="string">"abc"</span>,<span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(<span class="number">377</span>))</span><br></pre></td></tr></table></figure><blockquote><p>如果有下面的版本，那么可以编译通过吗？如果编译成功了会调用那一个？与上面的比较哪一个是特化？哪一个是范化？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Types&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> Types&amp;...args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//todo do nothing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><h3 id="万用哈希函数"><a href="#万用哈希函数" class="headerlink" title="万用哈希函数"></a>万用哈希函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> fname;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> lname;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerHash</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Customer&amp;c)</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hash_val(c.fname,c.lname.c.no);<span class="comment">//调用函数1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 首先进入这个函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="title">hash_val</span><span class="params">(<span class="keyword">const</span> Types...args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> seed = <span class="number">0</span>;</span><br><span class="line">    hash_val(seed,args...);<span class="comment">//调用函数2 函数2是特化版本</span></span><br><span class="line">    <span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hash_val</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">szie_t</span>&amp; seed, <span class="keyword">const</span> Types&amp;...args)</span></span>&#123;</span><br><span class="line">    hash_combine(seed,val);</span><br><span class="line">    hash_val(seed,args...);<span class="comment">//递归调用函数2，直到剩余参数满足函数3，然后调用特化版本函数3结束递归调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 auxiliary generic functions，用来结束递归。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hash_val</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>&amp; seed, <span class="keyword">const</span> T&amp; val)</span></span>&#123;</span><br><span class="line">    hash_combine(seed,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//万用hash函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hash_combine</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>&amp; seed, <span class="keyword">const</span> T&amp; val)</span></span>&#123;</span><br><span class="line">    seed ^= <span class="built_in">std</span>::hash&lt;T&gt;()(val) + <span class="number">0x9e3779b9</span> + (seed&lt;&lt;<span class="number">6</span>) + (seed&gt;&gt;<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tuple实现"><a href="#tuple实现" class="headerlink" title="tuple实现"></a>tuple实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Values&gt; <span class="class"><span class="keyword">class</span> <span class="title">tuple</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">tuple</span>&lt;&gt;&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tuple</span>&lt;Head,Tail...&gt; :</span> <span class="keyword">private</span> tuple&lt;Tail...&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> tuple&lt;Tail...&gt; inherited;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    tuple()&#123;&#125;</span><br><span class="line">    tuple(Head v,Tail...vtail):m_head(v),inherited(vtail...)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typename</span> Head::type <span class="title">head</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> m_head;&#125;</span><br><span class="line">    inherited&amp; tail &#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Head m_head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;侯捷老师的课程笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h2&gt;&lt;p&gt;类似下面的写法，在typename后面加了 … 表示
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++11新特性</title>
    <link href="http://yoursite.com/2020/06/16/c++11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/06/16/c++11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%A4%B4%E6%96%87%E4%BB%B6/</id>
    <published>2020-06-16T07:14:30.000Z</published>
    <updated>2020-06-17T16:27:40.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul><li>在c++11(C++2.0)中c++标准库的头文件不带.h，例如<code>#include&lt;list&gt;</code></li><li>对于c头文件也不带.h，而是在前面加个c，例如 <code>#include&lt;cstdio&gt;</code></li><li>对于旧式的用法 <code>#include&lt;stdio.h&gt;</code>也支持</li></ul><h2 id="c-2-0-新加的头文件"><a href="#c-2-0-新加的头文件" class="headerlink" title="c++2.0 新加的头文件"></a>c++2.0 新加的头文件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;type_traits&gt; //类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;//无序set 哈希表</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;forward_list&gt; //单列表</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;array&gt; //数组</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tuple&gt; //元组</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;regex&gt; //正则表达式</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt; //线程</span></span></span><br></pre></td></tr></table></figure><h2 id="确认支持c-11"><a href="#确认支持c-11" class="headerlink" title="确认支持c++11"></a>确认支持c++11</h2><p>marco __cplusplus 可以查看编译器的c++版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;__cplusplus&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><ul><li><a href="http://www.cplusplus.com/" target="_blank" rel="noopener">http://www.cplusplus.com/</a></li><li><a href="https://en.cppreference.com/w/" target="_blank" rel="noopener">https://en.cppreference.com/w/</a></li><li><a href="http://gcc.gnu.org/" target="_blank" rel="noopener">http://gcc.gnu.org/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在c++11(C++2.0)中c++标准库的头文件不带.h，例如&lt;code&gt;#include&amp;lt;list&amp;gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/14/hello-world/"/>
    <id>http://yoursite.com/2020/06/14/hello-world/</id>
    <published>2020-06-14T09:26:37.040Z</published>
    <updated>2020-06-14T09:26:37.040Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
